    { //////// Begin generated code: Update model      ////////
        double subx0 = // Not supported in C:
// _model.OCV_from_SOC
I*x(STATE_IDX_R0) + V + x(STATE_IDX_V1) + x(STATE_IDX_V2) - _model.OCV_from_SOC(x(STATE_IDX_SOC), temp_C);
        double subx1 = ((_params.V_sigma + x(STATE_IDX_R0)*(I*_params.I_scale_sigma + _params.I_sigma))*(_params.V_sigma + x(STATE_IDX_R0)*(I*_params.I_scale_sigma + _params.I_sigma)));
        double subx2 = I*P(2,4);
        double subx3 = I*P(3,4);
        double subx4 = // Not supported in C:
// _model.OCV_from_SOC_diff
_model.OCV_from_SOC_diff(x(STATE_IDX_SOC), temp_C);
        double subx5 = P(0,0)*subx4;
        double subx6 = I*P(0,4);
        double subx7 = -P(0,2) - P(0,3) + subx5 - subx6;
        double subx8 = P(0,4)*subx4;
        double subx9 = I*P(4,4);
        double subx10 = -P(2,4) - P(3,4) + subx8 - subx9;
        double subx11 = P(0,2)*subx4;
        double subx12 = P(0,3)*subx4;
        double subx13 = -I*subx10 + P(2,2) + 2*P(2,3) + P(3,3) + subx1 - subx11 - subx12 + subx2 + subx3 + subx4*subx7;
        double subx14 = 1/(subx13);
        double subx15 = subx0*subx14;
        double subx16 = P(0,1)*subx4;
        double subx17 = I*P(1,4);
        double subx18 = -P(1,2) - P(1,3) + subx16 - subx17;
        double subx19 = -P(2,2) - P(2,3) + subx11 - subx2;
        double subx20 = subx14*subx19;
        double subx21 = -P(2,3) - P(3,3) + subx12 - subx3;
        double subx22 = subx14*subx21;
        double subx23 = P(0,5)*subx4;
        double subx24 = I*P(4,5);
        double subx25 = -P(2,5) - P(3,5) + subx23 - subx24;
        double subx26 = P(0,6)*subx4;
        double subx27 = I*P(4,6);
        double subx28 = -P(2,6) - P(3,6) + subx26 - subx27;
        double subx29 = -subx14*subx4*subx7 + 1;
        double subx30 = subx14*subx7;
        double subx31 = P(0,0)*subx29 + P(0,2)*subx30 + P(0,3)*subx30 + subx30*subx6;
        double subx32 = subx1/((subx13)*(subx13));
        double subx33 = P(0,2)*subx29 + P(2,2)*subx30 + P(2,3)*subx30 + subx2*subx30;
        double subx34 = P(0,3)*subx29 + P(2,3)*subx30 + P(3,3)*subx30 + subx3*subx30;
        double subx35 = P(0,4)*subx29 + P(2,4)*subx30 + P(3,4)*subx30 + subx30*subx9;
        double subx36 = I*subx35;
        double subx37 = subx14*subx18;
        double subx38 = subx32*subx7;
        double subx39 = subx31*subx4;
        double subx40 = subx20 + 1;
        double subx41 = subx22 + 1;
        double subx42 = I*subx10*subx14 + 1;
        double subx43 = subx10*subx14;
        double subx44 = subx14*subx25;
        double subx45 = subx14*subx28;
        double subx46 = P(0,1) + P(0,2)*subx37 + P(0,3)*subx37 - subx37*subx5 + subx37*subx6;
        double subx47 = P(1,2) + P(2,2)*subx37 + P(2,3)*subx37 - subx11*subx37 + subx2*subx37;
        double subx48 = P(1,3) + P(2,3)*subx37 + P(3,3)*subx37 - subx12*subx37 + subx3*subx37;
        double subx49 = P(1,4) + P(2,4)*subx37 + P(3,4)*subx37 - subx37*subx8 + subx37*subx9;
        double subx50 = I*subx49;
        double subx51 = subx4*subx46;
        double subx52 = subx18*subx32;
        double subx53 = P(0,2)*subx40 + P(0,3)*subx20 - subx20*subx5 + subx20*subx6;
        double subx54 = P(2,3)*subx40 + P(3,3)*subx20 - subx12*subx20 + subx20*subx3;
        double subx55 = P(2,2)*subx40 + P(2,3)*subx20 - subx11*subx20 + subx2*subx20;
        double subx56 = P(2,4)*subx40 + P(3,4)*subx20 - subx20*subx8 + subx20*subx9;
        double subx57 = I*subx56;
        double subx58 = subx4*subx53;
        double subx59 = subx19*subx32;
        double subx60 = P(0,2)*subx22 + P(0,3)*subx41 - subx22*subx5 + subx22*subx6;
        double subx61 = P(2,2)*subx22 + P(2,3)*subx41 - subx11*subx22 + subx2*subx22;
        double subx62 = P(2,3)*subx22 + P(3,3)*subx41 - subx12*subx22 + subx22*subx3;
        double subx63 = P(2,4)*subx22 + P(3,4)*subx41 - subx22*subx8 + subx22*subx9;
        double subx64 = I*subx63;
        double subx65 = subx4*subx60;
        double subx66 = subx21*subx32;
        double subx67 = P(0,2)*subx43 + P(0,3)*subx43 + P(0,4)*subx42 - subx43*subx5;
        double subx68 = P(2,2)*subx43 + P(2,3)*subx43 + P(2,4)*subx42 - subx11*subx43;
        double subx69 = P(2,3)*subx43 + P(3,3)*subx43 + P(3,4)*subx42 - subx12*subx43;
        double subx70 = P(2,4)*subx43 + P(3,4)*subx43 + P(4,4)*subx42 - subx43*subx8;
        double subx71 = I*subx70;
        double subx72 = subx4*subx67;
        double subx73 = P(0,2)*subx44 + P(0,3)*subx44 + P(0,5) - subx44*subx5 + subx44*subx6;
        double subx74 = P(2,2)*subx44 + P(2,3)*subx44 + P(2,5) - subx11*subx44 + subx2*subx44;
        double subx75 = P(2,3)*subx44 + P(3,3)*subx44 + P(3,5) - subx12*subx44 + subx3*subx44;
        double subx76 = P(2,4)*subx44 + P(3,4)*subx44 + P(4,5) - subx44*subx8 + subx44*subx9;
        double subx77 = I*subx76;
        double subx78 = subx4*subx73;
        double subx79 = P(0,2)*subx45 + P(0,3)*subx45 + P(0,6) - subx45*subx5 + subx45*subx6;
        double subx80 = P(2,2)*subx45 + P(2,3)*subx45 + P(2,6) - subx11*subx45 + subx2*subx45;
        double subx81 = P(2,3)*subx45 + P(3,3)*subx45 + P(3,6) - subx12*subx45 + subx3*subx45;
        double subx82 = P(2,4)*subx45 + P(3,4)*subx45 + P(4,6) - subx45*subx8 + subx45*subx9;
        double subx83 = I*subx82;
        double subx84 = subx4*subx79;
        y = subx0;
        NIS = ((subx0)*(subx0))*subx14;
        x_n(0,0) = subx15*subx7 + x(STATE_IDX_SOC);
        x_n(1,0) = subx15*subx18 + x(STATE_IDX_SOH);
        x_n(2,0) = subx0*subx20 + x(STATE_IDX_V1);
        x_n(3,0) = subx0*subx22 + x(STATE_IDX_V2);
        x_n(4,0) = subx10*subx15 + x(STATE_IDX_R0);
        x_n(5,0) = subx15*subx25 + x(STATE_IDX_R1);
        x_n(6,0) = subx15*subx28 + x(STATE_IDX_R2);
        P_n(0,0) = subx29*subx31 + subx30*subx33 + subx30*subx34 + subx30*subx36 + subx32*((subx7)*(subx7));
        P_n(0,1) = P(0,1)*subx29 + P(1,2)*subx30 + P(1,3)*subx30 + subx17*subx30 + subx18*subx38 + subx33*subx37 + subx34*subx37 + subx36*subx37 - subx37*subx39;
        P_n(0,2) = subx19*subx38 + subx20*subx34 + subx20*subx36 - subx20*subx39 + subx33*subx40;
        P_n(0,3) = subx21*subx38 + subx22*subx33 + subx22*subx36 - subx22*subx39 + subx34*subx41;
        P_n(0,4) = subx10*subx38 + subx33*subx43 + subx34*subx43 + subx35*subx42 - subx39*subx43;
        P_n(0,5) = P(0,5)*subx29 + P(2,5)*subx30 + P(3,5)*subx30 + subx24*subx30 + subx25*subx38 + subx33*subx44 + subx34*subx44 + subx36*subx44 - subx39*subx44;
        P_n(0,6) = P(0,6)*subx29 + P(2,6)*subx30 + P(3,6)*subx30 + subx27*subx30 + subx28*subx38 + subx33*subx45 + subx34*subx45 + subx36*subx45 - subx39*subx45;
        P_n(1,0) = subx18*subx38 + subx29*subx46 + subx30*subx47 + subx30*subx48 + subx30*subx50;
        P_n(1,1) = P(1,1) + P(1,2)*subx37 + P(1,3)*subx37 - subx16*subx37 + subx17*subx37 + ((subx18)*(subx18))*subx32 + subx37*subx47 + subx37*subx48 + subx37*subx50 - subx37*subx51;
        P_n(1,2) = subx19*subx52 + subx20*subx48 + subx20*subx50 - subx20*subx51 + subx40*subx47;
        P_n(1,3) = subx21*subx52 + subx22*subx47 + subx22*subx50 - subx22*subx51 + subx41*subx48;
        P_n(1,4) = subx10*subx52 + subx42*subx49 + subx43*subx47 + subx43*subx48 - subx43*subx51;
        P_n(1,5) = P(1,5) + P(2,5)*subx37 + P(3,5)*subx37 - subx23*subx37 + subx24*subx37 + subx25*subx52 + subx44*subx47 + subx44*subx48 + subx44*subx50 - subx44*subx51;
        P_n(1,6) = P(1,6) + P(2,6)*subx37 + P(3,6)*subx37 - subx26*subx37 + subx27*subx37 + subx28*subx52 + subx45*subx47 + subx45*subx48 + subx45*subx50 - subx45*subx51;
        P_n(2,0) = subx19*subx38 + subx29*subx53 + subx30*subx54 + subx30*subx55 + subx30*subx57;
        P_n(2,1) = P(1,2)*subx40 + P(1,3)*subx20 - subx16*subx20 + subx17*subx20 + subx19*subx52 + subx37*subx54 + subx37*subx55 + subx37*subx57 - subx37*subx58;
        P_n(2,2) = ((subx19)*(subx19))*subx32 + subx20*subx54 + subx20*subx57 - subx20*subx58 + subx40*subx55;
        P_n(2,3) = subx21*subx59 + subx22*subx55 + subx22*subx57 - subx22*subx58 + subx41*subx54;
        P_n(2,4) = subx10*subx59 + subx42*subx56 + subx43*subx54 + subx43*subx55 - subx43*subx58;
        P_n(2,5) = P(2,5)*subx40 + P(3,5)*subx20 - subx20*subx23 + subx20*subx24 + subx25*subx59 + subx44*subx54 + subx44*subx55 + subx44*subx57 - subx44*subx58;
        P_n(2,6) = P(2,6)*subx40 + P(3,6)*subx20 - subx20*subx26 + subx20*subx27 + subx28*subx59 + subx45*subx54 + subx45*subx55 + subx45*subx57 - subx45*subx58;
        P_n(3,0) = subx21*subx38 + subx29*subx60 + subx30*subx61 + subx30*subx62 + subx30*subx64;
        P_n(3,1) = P(1,2)*subx22 + P(1,3)*subx41 - subx16*subx22 + subx17*subx22 + subx21*subx52 + subx37*subx61 + subx37*subx62 + subx37*subx64 - subx37*subx65;
        P_n(3,2) = subx20*subx62 + subx20*subx64 - subx20*subx65 + subx21*subx59 + subx40*subx61;
        P_n(3,3) = ((subx21)*(subx21))*subx32 + subx22*subx61 + subx22*subx64 - subx22*subx65 + subx41*subx62;
        P_n(3,4) = subx10*subx66 + subx42*subx63 + subx43*subx61 + subx43*subx62 - subx43*subx65;
        P_n(3,5) = P(2,5)*subx22 + P(3,5)*subx41 - subx22*subx23 + subx22*subx24 + subx25*subx66 + subx44*subx61 + subx44*subx62 + subx44*subx64 - subx44*subx65;
        P_n(3,6) = P(2,6)*subx22 + P(3,6)*subx41 - subx22*subx26 + subx22*subx27 + subx28*subx66 + subx45*subx61 + subx45*subx62 + subx45*subx64 - subx45*subx65;
        P_n(4,0) = subx10*subx38 + subx29*subx67 + subx30*subx68 + subx30*subx69 + subx30*subx71;
        P_n(4,1) = P(1,2)*subx43 + P(1,3)*subx43 + P(1,4)*subx42 + subx10*subx52 - subx16*subx43 + subx37*subx68 + subx37*subx69 + subx37*subx71 - subx37*subx72;
        P_n(4,2) = subx10*subx59 + subx20*subx69 + subx20*subx71 - subx20*subx72 + subx40*subx68;
        P_n(4,3) = subx10*subx66 + subx22*subx68 + subx22*subx71 - subx22*subx72 + subx41*subx69;
        P_n(4,4) = ((subx10)*(subx10))*subx32 + subx42*subx70 + subx43*subx68 + subx43*subx69 - subx43*subx72;
        P_n(4,5) = P(2,5)*subx43 + P(3,5)*subx43 + P(4,5)*subx42 + subx10*subx25*subx32 - subx23*subx43 + subx44*subx68 + subx44*subx69 + subx44*subx71 - subx44*subx72;
        P_n(4,6) = P(2,6)*subx43 + P(3,6)*subx43 + P(4,6)*subx42 + subx10*subx28*subx32 - subx26*subx43 + subx45*subx68 + subx45*subx69 + subx45*subx71 - subx45*subx72;
        P_n(5,0) = subx25*subx38 + subx29*subx73 + subx30*subx74 + subx30*subx75 + subx30*subx77;
        P_n(5,1) = P(1,2)*subx44 + P(1,3)*subx44 + P(1,5) - subx16*subx44 + subx17*subx44 + subx25*subx52 + subx37*subx74 + subx37*subx75 + subx37*subx77 - subx37*subx78;
        P_n(5,2) = subx20*subx75 + subx20*subx77 - subx20*subx78 + subx25*subx59 + subx40*subx74;
        P_n(5,3) = subx22*subx74 + subx22*subx77 - subx22*subx78 + subx25*subx66 + subx41*subx75;
        P_n(5,4) = subx10*subx25*subx32 + subx42*subx76 + subx43*subx74 + subx43*subx75 - subx43*subx78;
        P_n(5,5) = P(2,5)*subx44 + P(3,5)*subx44 + P(5,5) - subx23*subx44 + subx24*subx44 + ((subx25)*(subx25))*subx32 + subx44*subx74 + subx44*subx75 + subx44*subx77 - subx44*subx78;
        P_n(5,6) = P(2,6)*subx44 + P(3,6)*subx44 + P(5,6) + subx25*subx28*subx32 - subx26*subx44 + subx27*subx44 + subx45*subx74 + subx45*subx75 + subx45*subx77 - subx45*subx78;
        P_n(6,0) = subx28*subx38 + subx29*subx79 + subx30*subx80 + subx30*subx81 + subx30*subx83;
        P_n(6,1) = P(1,2)*subx45 + P(1,3)*subx45 + P(1,6) - subx16*subx45 + subx17*subx45 + subx28*subx52 + subx37*subx80 + subx37*subx81 + subx37*subx83 - subx37*subx84;
        P_n(6,2) = subx20*subx81 + subx20*subx83 - subx20*subx84 + subx28*subx59 + subx40*subx80;
        P_n(6,3) = subx22*subx80 + subx22*subx83 - subx22*subx84 + subx28*subx66 + subx41*subx81;
        P_n(6,4) = subx10*subx28*subx32 + subx42*subx82 + subx43*subx80 + subx43*subx81 - subx43*subx84;
        P_n(6,5) = P(2,5)*subx45 + P(3,5)*subx45 + P(5,6) - subx23*subx45 + subx24*subx45 + subx25*subx28*subx32 + subx44*subx80 + subx44*subx81 + subx44*subx83 - subx44*subx84;
        P_n(6,6) = P(2,6)*subx45 + P(3,6)*subx45 + P(6,6) - subx26*subx45 + subx27*subx45 + ((subx28)*(subx28))*subx32 + subx45*subx80 + subx45*subx81 + subx45*subx83 - subx45*subx84;
    } //////// End generated code: Update model        ////////
