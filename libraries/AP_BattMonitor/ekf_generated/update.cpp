    { //////// Begin generated code: Update model      ////////
        double subx0 = // Not supported in C:
// _model.OCV_from_SOC
I*x(STATE_IDX_R0) + V + x(STATE_IDX_V1) + x(STATE_IDX_V2) - _model.OCV_from_SOC(x(STATE_IDX_SOC), temp_C);
        double subx1 = I*P(2,4);
        double subx2 = I*P(3,4);
        double subx3 = // Not supported in C:
// _model.OCV_from_SOC_diff
_model.OCV_from_SOC_diff(x(STATE_IDX_SOC), temp_C);
        double subx4 = P(0,0)*subx3;
        double subx5 = I*P(0,4);
        double subx6 = -P(0,2) - P(0,3) + subx4 - subx5;
        double subx7 = P(0,4)*subx3;
        double subx8 = I*P(4,4);
        double subx9 = -P(2,4) - P(3,4) + subx7 - subx8;
        double subx10 = P(0,2)*subx3;
        double subx11 = P(0,3)*subx3;
        double subx12 = -I*subx9 + P(2,2) + 2*P(2,3) + P(3,3) + subx1 - subx10 - subx11 + subx2 + subx3*subx6 + ((_params.I_sigma*x(STATE_IDX_R0) + _params.V_sigma)*(_params.I_sigma*x(STATE_IDX_R0) + _params.V_sigma));
        double subx13 = 1/(subx12);
        double subx14 = subx0*subx13;
        double subx15 = P(0,1)*subx3;
        double subx16 = I*P(1,4);
        double subx17 = -P(1,2) - P(1,3) + subx15 - subx16;
        double subx18 = -P(2,2) - P(2,3) - subx1 + subx10;
        double subx19 = subx13*subx18;
        double subx20 = -P(2,3) - P(3,3) + subx11 - subx2;
        double subx21 = subx13*subx20;
        double subx22 = P(0,5)*subx3;
        double subx23 = I*P(4,5);
        double subx24 = -P(2,5) - P(3,5) + subx22 - subx23;
        double subx25 = P(0,6)*subx3;
        double subx26 = I*P(4,6);
        double subx27 = -P(2,6) - P(3,6) + subx25 - subx26;
        double subx28 = -subx13*subx3*subx6 + 1;
        double subx29 = subx13*subx6;
        double subx30 = P(0,0)*subx28 + P(0,2)*subx29 + P(0,3)*subx29 + subx29*subx5;
        double subx31 = ((_params.I_sigma*x(STATE_IDX_R0) + _params.V_sigma)*(_params.I_sigma*x(STATE_IDX_R0) + _params.V_sigma))/((subx12)*(subx12));
        double subx32 = P(0,2)*subx28 + P(2,2)*subx29 + P(2,3)*subx29 + subx1*subx29;
        double subx33 = P(0,3)*subx28 + P(2,3)*subx29 + P(3,3)*subx29 + subx2*subx29;
        double subx34 = P(0,4)*subx28 + P(2,4)*subx29 + P(3,4)*subx29 + subx29*subx8;
        double subx35 = I*subx34;
        double subx36 = subx13*subx17;
        double subx37 = subx31*subx6;
        double subx38 = subx3*subx30;
        double subx39 = subx19 + 1;
        double subx40 = subx21 + 1;
        double subx41 = I*subx13*subx9 + 1;
        double subx42 = subx13*subx9;
        double subx43 = subx13*subx24;
        double subx44 = subx13*subx27;
        double subx45 = P(0,1) + P(0,2)*subx36 + P(0,3)*subx36 - subx36*subx4 + subx36*subx5;
        double subx46 = P(1,2) + P(2,2)*subx36 + P(2,3)*subx36 + subx1*subx36 - subx10*subx36;
        double subx47 = P(1,3) + P(2,3)*subx36 + P(3,3)*subx36 - subx11*subx36 + subx2*subx36;
        double subx48 = P(1,4) + P(2,4)*subx36 + P(3,4)*subx36 - subx36*subx7 + subx36*subx8;
        double subx49 = I*subx48;
        double subx50 = subx3*subx45;
        double subx51 = subx17*subx31;
        double subx52 = P(0,2)*subx39 + P(0,3)*subx19 - subx19*subx4 + subx19*subx5;
        double subx53 = P(2,3)*subx39 + P(3,3)*subx19 - subx11*subx19 + subx19*subx2;
        double subx54 = P(2,2)*subx39 + P(2,3)*subx19 + subx1*subx19 - subx10*subx19;
        double subx55 = P(2,4)*subx39 + P(3,4)*subx19 - subx19*subx7 + subx19*subx8;
        double subx56 = I*subx55;
        double subx57 = subx3*subx52;
        double subx58 = subx18*subx31;
        double subx59 = P(0,2)*subx21 + P(0,3)*subx40 - subx21*subx4 + subx21*subx5;
        double subx60 = P(2,2)*subx21 + P(2,3)*subx40 + subx1*subx21 - subx10*subx21;
        double subx61 = P(2,3)*subx21 + P(3,3)*subx40 - subx11*subx21 + subx2*subx21;
        double subx62 = P(2,4)*subx21 + P(3,4)*subx40 - subx21*subx7 + subx21*subx8;
        double subx63 = I*subx62;
        double subx64 = subx3*subx59;
        double subx65 = subx20*subx31;
        double subx66 = P(0,2)*subx42 + P(0,3)*subx42 + P(0,4)*subx41 - subx4*subx42;
        double subx67 = P(2,2)*subx42 + P(2,3)*subx42 + P(2,4)*subx41 - subx10*subx42;
        double subx68 = P(2,3)*subx42 + P(3,3)*subx42 + P(3,4)*subx41 - subx11*subx42;
        double subx69 = P(2,4)*subx42 + P(3,4)*subx42 + P(4,4)*subx41 - subx42*subx7;
        double subx70 = I*subx69;
        double subx71 = subx3*subx66;
        double subx72 = P(0,2)*subx43 + P(0,3)*subx43 + P(0,5) - subx4*subx43 + subx43*subx5;
        double subx73 = P(2,2)*subx43 + P(2,3)*subx43 + P(2,5) + subx1*subx43 - subx10*subx43;
        double subx74 = P(2,3)*subx43 + P(3,3)*subx43 + P(3,5) - subx11*subx43 + subx2*subx43;
        double subx75 = P(2,4)*subx43 + P(3,4)*subx43 + P(4,5) - subx43*subx7 + subx43*subx8;
        double subx76 = I*subx75;
        double subx77 = subx3*subx72;
        double subx78 = P(0,2)*subx44 + P(0,3)*subx44 + P(0,6) - subx4*subx44 + subx44*subx5;
        double subx79 = P(2,2)*subx44 + P(2,3)*subx44 + P(2,6) + subx1*subx44 - subx10*subx44;
        double subx80 = P(2,3)*subx44 + P(3,3)*subx44 + P(3,6) - subx11*subx44 + subx2*subx44;
        double subx81 = P(2,4)*subx44 + P(3,4)*subx44 + P(4,6) - subx44*subx7 + subx44*subx8;
        double subx82 = I*subx81;
        double subx83 = subx3*subx78;
        y = subx0;
        NIS = ((subx0)*(subx0))*subx13;
        x_n(0,0) = subx14*subx6 + x(STATE_IDX_SOC);
        x_n(1,0) = subx14*subx17 + x(STATE_IDX_SOH_INV);
        x_n(2,0) = subx0*subx19 + x(STATE_IDX_V1);
        x_n(3,0) = subx0*subx21 + x(STATE_IDX_V2);
        x_n(4,0) = subx14*subx9 + x(STATE_IDX_R0);
        x_n(5,0) = subx14*subx24 + x(STATE_IDX_R1);
        x_n(6,0) = subx14*subx27 + x(STATE_IDX_R2);
        P_n(0,0) = subx28*subx30 + subx29*subx32 + subx29*subx33 + subx29*subx35 + subx31*((subx6)*(subx6));
        P_n(0,1) = P(0,1)*subx28 + P(1,2)*subx29 + P(1,3)*subx29 + subx16*subx29 + subx17*subx37 + subx32*subx36 + subx33*subx36 + subx35*subx36 - subx36*subx38;
        P_n(0,2) = subx18*subx37 + subx19*subx33 + subx19*subx35 - subx19*subx38 + subx32*subx39;
        P_n(0,3) = subx20*subx37 + subx21*subx32 + subx21*subx35 - subx21*subx38 + subx33*subx40;
        P_n(0,4) = subx32*subx42 + subx33*subx42 + subx34*subx41 + subx37*subx9 - subx38*subx42;
        P_n(0,5) = P(0,5)*subx28 + P(2,5)*subx29 + P(3,5)*subx29 + subx23*subx29 + subx24*subx37 + subx32*subx43 + subx33*subx43 + subx35*subx43 - subx38*subx43;
        P_n(0,6) = P(0,6)*subx28 + P(2,6)*subx29 + P(3,6)*subx29 + subx26*subx29 + subx27*subx37 + subx32*subx44 + subx33*subx44 + subx35*subx44 - subx38*subx44;
        P_n(1,0) = subx17*subx37 + subx28*subx45 + subx29*subx46 + subx29*subx47 + subx29*subx49;
        P_n(1,1) = P(1,1) + P(1,2)*subx36 + P(1,3)*subx36 - subx15*subx36 + subx16*subx36 + ((subx17)*(subx17))*subx31 + subx36*subx46 + subx36*subx47 + subx36*subx49 - subx36*subx50;
        P_n(1,2) = subx18*subx51 + subx19*subx47 + subx19*subx49 - subx19*subx50 + subx39*subx46;
        P_n(1,3) = subx20*subx51 + subx21*subx46 + subx21*subx49 - subx21*subx50 + subx40*subx47;
        P_n(1,4) = subx41*subx48 + subx42*subx46 + subx42*subx47 - subx42*subx50 + subx51*subx9;
        P_n(1,5) = P(1,5) + P(2,5)*subx36 + P(3,5)*subx36 - subx22*subx36 + subx23*subx36 + subx24*subx51 + subx43*subx46 + subx43*subx47 + subx43*subx49 - subx43*subx50;
        P_n(1,6) = P(1,6) + P(2,6)*subx36 + P(3,6)*subx36 - subx25*subx36 + subx26*subx36 + subx27*subx51 + subx44*subx46 + subx44*subx47 + subx44*subx49 - subx44*subx50;
        P_n(2,0) = subx18*subx37 + subx28*subx52 + subx29*subx53 + subx29*subx54 + subx29*subx56;
        P_n(2,1) = P(1,2)*subx39 + P(1,3)*subx19 - subx15*subx19 + subx16*subx19 + subx18*subx51 + subx36*subx53 + subx36*subx54 + subx36*subx56 - subx36*subx57;
        P_n(2,2) = ((subx18)*(subx18))*subx31 + subx19*subx53 + subx19*subx56 - subx19*subx57 + subx39*subx54;
        P_n(2,3) = subx20*subx58 + subx21*subx54 + subx21*subx56 - subx21*subx57 + subx40*subx53;
        P_n(2,4) = subx41*subx55 + subx42*subx53 + subx42*subx54 - subx42*subx57 + subx58*subx9;
        P_n(2,5) = P(2,5)*subx39 + P(3,5)*subx19 - subx19*subx22 + subx19*subx23 + subx24*subx58 + subx43*subx53 + subx43*subx54 + subx43*subx56 - subx43*subx57;
        P_n(2,6) = P(2,6)*subx39 + P(3,6)*subx19 - subx19*subx25 + subx19*subx26 + subx27*subx58 + subx44*subx53 + subx44*subx54 + subx44*subx56 - subx44*subx57;
        P_n(3,0) = subx20*subx37 + subx28*subx59 + subx29*subx60 + subx29*subx61 + subx29*subx63;
        P_n(3,1) = P(1,2)*subx21 + P(1,3)*subx40 - subx15*subx21 + subx16*subx21 + subx20*subx51 + subx36*subx60 + subx36*subx61 + subx36*subx63 - subx36*subx64;
        P_n(3,2) = subx19*subx61 + subx19*subx63 - subx19*subx64 + subx20*subx58 + subx39*subx60;
        P_n(3,3) = ((subx20)*(subx20))*subx31 + subx21*subx60 + subx21*subx63 - subx21*subx64 + subx40*subx61;
        P_n(3,4) = subx41*subx62 + subx42*subx60 + subx42*subx61 - subx42*subx64 + subx65*subx9;
        P_n(3,5) = P(2,5)*subx21 + P(3,5)*subx40 - subx21*subx22 + subx21*subx23 + subx24*subx65 + subx43*subx60 + subx43*subx61 + subx43*subx63 - subx43*subx64;
        P_n(3,6) = P(2,6)*subx21 + P(3,6)*subx40 - subx21*subx25 + subx21*subx26 + subx27*subx65 + subx44*subx60 + subx44*subx61 + subx44*subx63 - subx44*subx64;
        P_n(4,0) = subx28*subx66 + subx29*subx67 + subx29*subx68 + subx29*subx70 + subx37*subx9;
        P_n(4,1) = P(1,2)*subx42 + P(1,3)*subx42 + P(1,4)*subx41 - subx15*subx42 + subx36*subx67 + subx36*subx68 + subx36*subx70 - subx36*subx71 + subx51*subx9;
        P_n(4,2) = subx19*subx68 + subx19*subx70 - subx19*subx71 + subx39*subx67 + subx58*subx9;
        P_n(4,3) = subx21*subx67 + subx21*subx70 - subx21*subx71 + subx40*subx68 + subx65*subx9;
        P_n(4,4) = subx31*((subx9)*(subx9)) + subx41*subx69 + subx42*subx67 + subx42*subx68 - subx42*subx71;
        P_n(4,5) = P(2,5)*subx42 + P(3,5)*subx42 + P(4,5)*subx41 - subx22*subx42 + subx24*subx31*subx9 + subx43*subx67 + subx43*subx68 + subx43*subx70 - subx43*subx71;
        P_n(4,6) = P(2,6)*subx42 + P(3,6)*subx42 + P(4,6)*subx41 - subx25*subx42 + subx27*subx31*subx9 + subx44*subx67 + subx44*subx68 + subx44*subx70 - subx44*subx71;
        P_n(5,0) = subx24*subx37 + subx28*subx72 + subx29*subx73 + subx29*subx74 + subx29*subx76;
        P_n(5,1) = P(1,2)*subx43 + P(1,3)*subx43 + P(1,5) - subx15*subx43 + subx16*subx43 + subx24*subx51 + subx36*subx73 + subx36*subx74 + subx36*subx76 - subx36*subx77;
        P_n(5,2) = subx19*subx74 + subx19*subx76 - subx19*subx77 + subx24*subx58 + subx39*subx73;
        P_n(5,3) = subx21*subx73 + subx21*subx76 - subx21*subx77 + subx24*subx65 + subx40*subx74;
        P_n(5,4) = subx24*subx31*subx9 + subx41*subx75 + subx42*subx73 + subx42*subx74 - subx42*subx77;
        P_n(5,5) = P(2,5)*subx43 + P(3,5)*subx43 + P(5,5) - subx22*subx43 + subx23*subx43 + ((subx24)*(subx24))*subx31 + subx43*subx73 + subx43*subx74 + subx43*subx76 - subx43*subx77;
        P_n(5,6) = P(2,6)*subx43 + P(3,6)*subx43 + P(5,6) + subx24*subx27*subx31 - subx25*subx43 + subx26*subx43 + subx44*subx73 + subx44*subx74 + subx44*subx76 - subx44*subx77;
        P_n(6,0) = subx27*subx37 + subx28*subx78 + subx29*subx79 + subx29*subx80 + subx29*subx82;
        P_n(6,1) = P(1,2)*subx44 + P(1,3)*subx44 + P(1,6) - subx15*subx44 + subx16*subx44 + subx27*subx51 + subx36*subx79 + subx36*subx80 + subx36*subx82 - subx36*subx83;
        P_n(6,2) = subx19*subx80 + subx19*subx82 - subx19*subx83 + subx27*subx58 + subx39*subx79;
        P_n(6,3) = subx21*subx79 + subx21*subx82 - subx21*subx83 + subx27*subx65 + subx40*subx80;
        P_n(6,4) = subx27*subx31*subx9 + subx41*subx81 + subx42*subx79 + subx42*subx80 - subx42*subx83;
        P_n(6,5) = P(2,5)*subx44 + P(3,5)*subx44 + P(5,6) - subx22*subx44 + subx23*subx44 + subx24*subx27*subx31 + subx43*subx79 + subx43*subx80 + subx43*subx82 - subx43*subx83;
        P_n(6,6) = P(2,6)*subx44 + P(3,6)*subx44 + P(6,6) - subx25*subx44 + subx26*subx44 + ((subx27)*(subx27))*subx31 + subx44*subx79 + subx44*subx80 + subx44*subx82 - subx44*subx83;
    } //////// End generated code: Update model        ////////
