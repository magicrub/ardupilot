if param:get("Q_ENABLE") == 1 then
    assert(param:get("ARSPD_FBW_MIN") == 14, "K1000: ARSPD_FBW_MIN Not Correct")
    assert(param:get("ARSPD_FBW_MAX") == 20, "K1000: ARSPD_FBW_MAX Not Correct")
    assert(param:get("TRIM_ARSPD_CM") == 1700, "K1000: TRIM_ARSPD_CM Not Correct")
    assert(param:get("ARMING_MIS_ITEMS") == 18, "K1000: ARMING_MIS_ITEMS Not Correct")
    assert(param:get("BATT_CAPACITY") == 35500, "K1000: BATT_CAPACITY Not Correct")
    assert(param:get("CAN_D2_UC_ESC_BM") == 15, "K1000: CAN_D2_UC_ESC_BM Not Correct")
    assert(param:get("CAN_D2_UC_OPTION") == 12, "K1000: CAN_D2_UC_OPTION Not Correct")
    assert(param:get("FLTMODE1") == 10, "K1000: FLTMODE1 Not Correct")
    assert(param:get("FLTMODE2") == 10, "K1000: FLTMODE2 Not Correct")
    assert(param:get("FLTMODE3") == 19, "K1000: FLTMODE3 Not Correct")
    assert(param:get("FLTMODE4") == 19, "K1000: FLTMODE4 Not Correct")
    assert(param:get("FLTMODE5") == 5, "K1000: FLTMODE5 Not Correct")
    assert(param:get("FLTMODE6") == 5, "K1000: FLTMODE6 Not Correct")
    assert(param:get("INS_HNTCH_ATT") == 2, "K1000: INS_HNTCH_ATT Not Correct")
    assert(param:get("INS_HNTCH_BW") == 0.5, "K1000: INS_HNTCH_BW Not Correct")
    assert(param:get("INS_HNTCH_ENABLE") == 1, "K1000: INS_HNTCH_ENABLE Not Correct")
    assert(param:get("INS_HNTCH_FREQ") == 8.4, "K1000: INS_HNTCH_FREQ Not Correct")
    assert(param:get("INS_HNTCH_HMNCS") == 3, "K1000: INS_HNTCH_HMNCS Not Correct")
    assert(param:get("INS_NOTCH_ATT") == 20, "K1000: INS_NOTCH_ATT Not Correct")
    assert(param:get("INS_NOTCH_BW") == 30, "K1000: INS_NOTCH_BW Not Correct")
    assert(param:get("INS_NOTCH_ENABLE") == 1, "K1000: INS_NOTCH_ENABLE Not Correct")
    assert(param:get("INS_NOTCH_FREQ") == 113, "K1000: INS_NOTCH_FREQ Not Correct")
    assert(param:get("Q_FRAME_CLASS") == 1, "K1000: Q_FRAME_CLASS Not Correct")
    assert(param:get("Q_FRAME_TYPE") == 1, "K1000: Q_FRAME_TYPE Not Correct")
    assert(param:get("Q_ANGLE_MAX") == 1500, "K1000: Q_ANGLE_MAX Not Correct")
    assert(param:get("Q_ASSIST_SPEED") == 13, "K1000: Q_ASSIST_SPEED Not Correct")
    assert(param:get("Q_A_ACCEL_P_MAX") == 30000, "K1000: Q_A_ACCEL_P_MAX Not Correct")
    assert(param:get("Q_A_ACCEL_R_MAX") == 30000, "K1000: Q_A_ACCEL_R_MAX Not Correct")
    assert(param:get("Q_A_ACCEL_Y_MAX") == 1000, "K1000: Q_A_ACCEL_Y_MAX Not Correct")
    assert(param:get("Q_A_ANG_PIT_P") == 1.05, "K1000: Q_A_ANG_PIT_P Not Correct")
    assert(param:get("Q_A_ANG_RLL_P") == 2.66, "K1000: Q_A_ANG_RLL_P Not Correct")
    assert(param:get("Q_A_ANG_YAW_P") == 3.0, "K1000: Q_A_ANG_YAW_P Not Correct")
    assert(param:get("Q_A_RATE_P_MAX") == 0.0, "K1000: Q_A_RATE_P_MAX Not Correct")
    assert(param:get("Q_A_RATE_R_MAX") == 0.0, "K1000: Q_A_RATE_R_MAX Not Correct")
    assert(param:get("Q_A_RATE_Y_MAX") == 0.0, "K1000: Q_A_RATE_Y_MAX Not Correct")
    assert(param:get("Q_A_RAT_PIT_D") == 0.01, "K1000: Q_A_RAT_PIT_D Not Correct")
    assert(param:get("Q_A_RAT_PIT_I") == 0.50, "K1000: Q_A_RAT_PIT_I Not Correct")
    assert(param:get("Q_A_RAT_PIT_P") == 0.50, "K1000: Q_A_RAT_PIT_P Not Correct")
    assert(param:get("Q_A_RAT_RLL_D") == 0.015, "K1000: Q_A_RAT_RLL_D Not Correct")
    assert(param:get("Q_A_RAT_RLL_I") == 0.50, "K1000: Q_A_RAT_RLL_I Not Correct")
    assert(param:get("Q_A_RAT_RLL_P") == 1.15, "K1000: Q_A_RAT_RLL_P Not Correct")
    assert(param:get("Q_A_RAT_YAW_FLTE") == 0.0, "K1000: Q_A_RAT_YAW_FLTE Not Correct")
    assert(param:get("Q_A_RAT_YAW_I") == 0.09, "K1000: Q_A_RAT_YAW_I Not Correct")
    assert(param:get("Q_A_RAT_YAW_P") == 4.37, "K1000: Q_A_RAT_YAW_P Not Correct")
    assert(param:get("Q_M_THST_HOVER") == 0.52, "K1000: Q_M_THST_HOVER Not Correct")
    assert(param:get("Q_OPTIONS") == 1057, "K1000: Q_OPTIONS Not Correct")
    assert(param:get("Q_P_ACCZ_FLTE") == 7, "K1000: Q_P_ACCZ_FLTE Not Correct")
    assert(param:get("Q_P_ACCZ_FLTT") == 5, "K1000: Q_P_ACCZ_FLTT Not Correct")
    assert(param:get("Q_P_ACCZ_P") == 0.3325, "K1000: Q_P_ACCZ_P Not Correct")
    assert(param:get("Q_P_ANGLE_MAX") == 15, "K1000: Q_P_ANGLE_MAX Not Correct")
    assert(param:get("Q_P_POSXY_P") == 1.15, "K1000: Q_P_POSXY_P Not Correct")
    assert(param:get("Q_P_POSZ_P") == 1.5, "K1000: Q_P_POSZ_P Not Correct")
    assert(param:get("Q_P_VELXY_P") == 1.8, "K1000: Q_P_VELXY_P Not Correct")
    assert(param:get("Q_P_VELZ_D") == 0.6, "K1000: Q_P_VELZ_D Not Correct")
    assert(param:get("Q_P_VELZ_P") == 7.5, "K1000: Q_P_VELZ_P Not Correct")
    assert(param:get("Q_TRANS_DECEL") == 1.2, "K1000: Q_TRANS_DECEL Not Correct")
    assert(param:get("Q_VELZ_MAX") == 100, "K1000: Q_VELZ_MAX Not Correct")
    assert(param:get("Q_VELZ_MAX_DN") == 100, "K1000: Q_VELZ_MAX_DN Not Correct")
    assert(param:get("Q_WP_SPEED_DN") == 200, "K1000: Q_WP_SPEED_DN Not Correct")
    assert(param:get("Q_WP_SPEED_UP") == 60, "K1000: Q_WP_SPEED_UP Not Correct")
    assert(param:get("Q_WVANE_GAIN") == 0.1, "K1000: Q_WVANE_GAIN Not Correct")
    assert(param:get("Q_YAW_RATE_MAX") == 10, "K1000: Q_YAW_RATE_MAX Not Correct")
    assert(param:get("SCHED_LOOP_RATE") == 300, "K1000: SCHED_LOOP_RATE Not Correct")
    assert(param:get("SERVO10_FUNCTION") == 36, "K1000: SERVO10_FUNCTION Not Correct")
    assert(param:get("SERVO10_MAX") == 1940, "K1000: SERVO10_MAX Not Correct")
    assert(param:get("SERVO10_MIN") == 1100, "K1000: SERVO10_MIN Not Correct")
    assert(param:get("SERVO7_FUNCTION") == 33, "K1000: SERVO7_FUNCTION Not Correct")
    assert(param:get("SERVO7_MAX") == 1940, "K1000: SERVO7_MAX Not Correct")
    assert(param:get("SERVO7_MIN") == 1100, "K1000: SERVO7_MIN Not Correct")
    assert(param:get("SERVO8_FUNCTION") == 34, "K1000: SERVO8_FUNCTION Not Correct")
    assert(param:get("SERVO8_MAX") == 1940, "K1000: SERVO8_MAX Not Correct")
    assert(param:get("SERVO8_MIN") == 1100, "K1000: SERVO8_MIN Not Correct")
    assert(param:get("SERVO9_FUNCTION") == 35, "K1000: SERVO9_FUNCTION Not Correct")
    assert(param:get("SERVO9_MAX") == 1940, "K1000: SERVO9_MAX Not Correct")
    assert(param:get("SERVO9_MIN") == 1100, "K1000: SERVO9_MIN Not Correct")
    assert(param:get("TKOFF_THR_MAX") == 0, "K1000: TKOFF_THR_MAX Not Correct")
    assert(param:get("WP_LOITER_RAD") == 150, "K1000: WP_LOITER_RAD Not Correct")
    gcs:send_text(4, "K1000: VTOL Param Audit Complete")
end
