# hw definition file for FAP based on fmuv3

# MCU class and specific type
MCU STM32F4xx STM32F427xx

# board ID for firmware load
APJ_BOARD_ID 113
define CONFIG_HAL_BOARD_SUBTYPE HAL_BOARD_SUBTYPE_CHIBIOS_FAP

# crystal frequency
OSCILLATOR_HZ 16000000
define STM32_PLLM_VALUE 16

# board voltage
STM32_VDD 330U

# ChibiOS system timer
STM32_ST_USE_TIMER 5

# flash size
FLASH_SIZE_KB 2048

# serial port for stdout
STDOUT_SERIAL SD8
STDOUT_BAUDRATE 115200

# order of UARTs
UART_ORDER UART8

# GPS
PE0 UART8_RX UART8
PE1 UART8_TX UART8

#debug 1
#PC6 USART6_TX USART6
#PC7 USART6_RX USART6

#debug 2
#PD8 USART3_TX USART3
#PD9 USART3_RX USART3

#SPI
PE3 MPU_DRDY INPUT
PA4 MPU_CS CS
PA5 SPI1_SCK SPI1
PA6 SPI1_MISO SPI1
PA7 SPI1_MOSI SPI1

# These are the pins for SWD debugging with a STlinkv2 or black-magic probe.
PA13 JTMS-SWDIO SWD
PA14 JTCK-SWCLK SWD


# This defines a couple of general purpose outputs, mapped to GPIO
# numbers 1 and 2 for users.
#PE9 EXTERN_GPIO1 OUTPUT GPIO(1)
PE10 EXTERN_GPIO2 OUTPUT GPIO(1)
#PE11 EXTERN_GPIO3 OUTPUT GPIO(3)
PE12 EXTERN_GPIO4 OUTPUT GPIO(2)
#PE13 EXTERN_GPIO5 OUTPUT GPIO(5)
#PE14 EXTERN_GPIO6 OUTPUT GPIO(6)
PE15 EXTERN_GPIO7 OUTPUT GPIO(3)


# Now the first I2C bus. The pin speeds are automatically setup
# correctly, but can be overridden here if needed.
PA8 I2C3_SCL I2C1
PC9 I2C3_SDA I2C1
PD7 MAG_DRDY INPUT

# order of I2C buses
I2C_ORDER I2C1


# Now setup the pins for the microSD card for 1bit data width
PC8 SDIO_D0 SDIO
PC12 SDIO_CK SDIO
PD2 SDIO_CMD SDIO
#PC0 SDIO_CD SDIO

define HAL_USE_SDC_SDIO_1BIT_DATA_WIDTH TRUE



# Now we start defining some PWM pins. We also map these pins to GPIO
# values, so users can set BRD_PWM_COUNT to choose how many of the PWM
# outputs on the primary MCU are setup as PWM and how many as
# GPIOs. To match HAL_PX4 we number the GPIOs for the PWM outputs
# starting at 50.
PE14 TIM1_CH4 TIM1 PWM(1) GPIO(50)
PE13 TIM1_CH3 TIM1 PWM(2) GPIO(51)
PE11 TIM1_CH2 TIM1 PWM(3) GPIO(52)
PE9  TIM1_CH1 TIM1 PWM(4) GPIO(53)

define BOARD_PWM_COUNT_DEFAULT 4


# Now the SPI device table. This table creates all accessible SPI
# devices, giving the name of the device (which is used by device
# drivers to open the device), plus which SPI bus it it on, what
# device ID will be used (which controls the IDs used in parameters
# such as COMPASS_DEV_ID, so we can detect when the list of devices
# changes between reboots for calibration purposes), the SPI mode to
# use, and the low and high speed settings for the device.

# You can define more SPI devices than you actually have, to allow for
# flexibility in board setup, and the driver code can probe to see
# which are responding.

# The DEVID values and device names are chosen to match the PX4 port
# of ArduPilot so users don't need to re-do their accel and compass
# calibrations when moving to ChibiOS.

SPIDEV mpu6500        SPI1 DEVID1  MPU_CS       MODE3  2*MHZ  8*MHZ

define CONFIG_ARCH_BOARD_FAP 1

# Nnow some defines for logging and terrain data files.
define HAL_BOARD_LOG_DIRECTORY "/APM/LOGS"
define HAL_BOARD_TERRAIN_DIRECTORY "/APM/TERRAIN"

# We need to tell HAL_ChibiOS/Storage.cpp how much storage is
# available (in bytes).
define HAL_STORAGE_SIZE 15360

# Now define fallback storage location is flash if no FRAM
# fitted. This needs to be carefully chosen to align with your
# bootloader. The flash storage system needs two sectors, and the
# sectors must be at least 20% larger than HAL_STORAGE_SIZE.
define STORAGE_FLASH_PAGE 1
define FLASH_RESERVE_START_KB 64

# Enable FAT filesystem support (needs a microSD defined via SDIO).
define HAL_OS_FATFS_IO 1

# We can't share the IO UART (USART6).
DMA_NOSHARE USART6_TX USART6_RX
DMA_PRIORITY USART6*

define HAL_COMPASS_DEFAULT HAL_COMPASS_NONE
#define HAL_COMPASS_DEFAULT HAL_COMPASS_HMC5843
#define HAL_COMPASS_DEFAULT HAL_COMPASS_MAG3110
define HAL_COMPASS_MAG3110_I2C_BUS 0
define HAL_COMPASS_HMC5883_I2C_BUS 0
define HAL_COMPASS_MAG3110_I2C_ADDR 0x1C
define HAL_COMPASS_HMC5883_I2C_ADDR 0x3C

define HAL_INS_DEFAULT HAL_INS_NONE
#define HAL_INS_DEFAULT HAL_INS_MPU6500
define HAL_INS_DEFAULT_ROTATION ROTATION_ROLL_180_YAW_270

define HAL_BARO_DEFAULT HAL_BARO_MS5611_I2C
define HAL_BARO_MS5611_I2C_BUS 0
define HAL_BARO_MS5611_I2C_ADDR 0x77
# maybe MS5607 or MS5611
# maybe I2C_ADDR 0x77 or 0xEE



